{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/tensorflow-ubuntu-20.04/","result":{"data":{"site":{"siteMetadata":{"title":"The stable","author":{"name":"Iver Egge","summary":"who lives and works in Oslo, Norway."}}},"mdx":{"id":"a8172a23-f8fd-583d-a838-22e9b73e5647","excerpt":"Install Nvidia drivers Search for available drivers Find the latest version that is  headless  and install that. In my case You should also install  nvidiaâ€¦","fields":{"slug":"/tensorflow-ubuntu-20.04/"},"frontmatter":{"title":"Tensorflow setup on Ubuntu Server 20.04","date":"December 26, 2020"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tensorflow setup on Ubuntu Server 20.04\",\n  \"date\": \"2020-12-26T22:12:03.284Z\",\n  \"description\": \"Setting up Tensorflow with CUDA support on Ubuntu Server 20.04 using Docker\",\n  \"category\": \"AI\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Install Nvidia drivers\"), mdx(\"p\", null, \"Search for available drivers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt update\\nsudo apt search nvidia-drivers\\n\")), mdx(\"p\", null, \"Find the latest version that is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"headless\"), \" and install that.\"), mdx(\"p\", null, \"In my case\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt install nvidia-headless-455\\n\")), mdx(\"p\", null, \"You should also install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nvidia-utils\"), \", which contains e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nvidia-smi\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt install nvidia-utils-455\\n\")), mdx(\"p\", null, \"Restart the computer, or load the module with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\")), mdx(\"h2\", null, \"Install nvidia-docker2\"), mdx(\"p\", null, \"Following \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#setting-up-nvidia-container-toolkit\"\n  }), \"the guide here\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\\\\\n   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \\\\\\n   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt-get update\\nsudo apt-get install -y nvidia-docker2\\n\")), mdx(\"p\", null, \"Restart docker and test a container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo systemctl restart docker\\nsudo docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\\n\")), mdx(\"p\", null, \"Which should list your Nvidia GPUs with their workload, temperature, memory usage, etc.\"), mdx(\"h2\", null, \"Test a Tensorflow-container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker run --gpus all -it --rm tensorflow/tensorflow:latest-gpu \\\\\\n   python -c \\\"import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))\\\"\\n\")), mdx(\"p\", null, \"Which should state that it found a GPU, e.g.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"2021-02-08 19:32:41.055310: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1406] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 10271 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:09:00.0, compute capability: 6.1)\\ntf.Tensor(871.8593, shape=(), dtype=float32)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/tensorflow-ubuntu-20.04/","previous":{"id":"747a84c0-49b8-5a9d-b02f-1dafe40dc6ba","fields":{"slug":"/nrf9160-nb-iot/"},"frontmatter":{"title":"nRF9160 NB-IoT"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"nRF9160 NB-IoT\",\n  \"date\": \"2020-07-22T22:40:32.169Z\",\n  \"description\": \"Setting up the nRF9160 DK\",\n  \"category\": \"IoT\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}}}